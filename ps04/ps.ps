%!PS-Adobe-3.0
%%BoundingBox: 18 36 594 756
%%Title: letter
%%Creator: GNU Enscript 1.6.5.90
%%CreationDate: Tue Mar  4 15:14:26 2014
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6.5 90
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6.5 90
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier-Bold /F-gs-font MF
/F-gs-font 11 11 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6.5 90

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 576 def
/d_page_h 720 def
/d_header_x 0 def
/d_header_y 705 def
/d_header_w 576 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 576 def
/d_footer_h 0 def
/d_output_w 576 def
/d_output_h 705 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Tue Mar 04 15:14:20 2014) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
44.6 667 M
(                MASSACHVSETTS INSTITVTE OF TECHNOLOGY) s
44.6 655 M
(      Department of Electrical Engineering and Computer Science) s
44.6 631 M
(                       6.945/6.S081 Spring 2014) s
44.6 619 M
(                            Problem Set 4) s
44.6 595 M
( Issued: Wed. 5 March 2014                    Due: Wed. 12 March 2014) s
44.6 571 M
(Reading:) s
44.6 559 M
(    SICP, From Chapter 4: 4.1 and 4.2; \(pp. 359--411\)) s
44.6 547 M
(    en.wikipedia.org/wiki/Evaluation_strategy) s
44.6 535 M
(    www.cs.indiana.edu/cgi-bin/techreports/TRNNN.cgi?trnum=TR44) s
44.6 523 M
(    http://en.wikipedia.org/wiki/Fexpr) s
44.6 511 M
(    http://web.cs.wpi.edu/~jshutt/kernel.html) s
44.6 487 M
(Code: load.scm, utils.scm, ghelper.scm, ) s
44.6 475 M
(      syntax.scm, rtdata.scm, interp.scm, repl.scm,) s
44.6 463 M
(      general-procedures.scm, kons.scm) s
44.6 451 M
(   code is on the class web page... no reason to kill more trees.) s
44.6 415 M
(                     A Language For Each Problem) s
44.6 391 M
(One of the best ways to attack a problem is to make up a language in) s
44.6 379 M
(which the solution is easily expressed.  This strategy is especially) s
44.6 367 M
(effective because if the language you make up is powerful enough, many) s
44.6 355 M
(problems that are similar to the one you are attacking will have easy-) s
44.6 343 M
(to-express solutions in the your language.  It is especially effective) s
44.6 331 M
(if you start with a flexible mechanism.  Here we get some practice) s
44.6 319 M
(working with a souped-up interpreter for a Lisp-like language.) s
44.6 295 M
(We start with an extended version of Scheme similar to the ones) s
44.6 283 M
(described in SICP, Chapter 4.  Without a good understanding of how the) s
44.6 271 M
(evaluator is structured it is very easy to become confused between the) s
44.6 259 M
(programs that the evaluator is interpreting, the procedures that) s
44.6 247 M
(implement the evaluator itself, and Scheme procedures called by the) s
44.6 235 M
(evaluator.  You will need to study Chapter 4 through subsection 4.2.2) s
44.6 223 M
(carefully in order to do this assignment.) s
44.6 199 M
(The interpreters in the code that we will work with in this problem) s
44.6 187 M
(set are built on the generic operations infrastructure we developed in) s
44.6 175 M
(previous problem sets.  Indeed, in these interpreters, unlike) s
44.6 163 M
(the ones in SICP, EVAL and APPLY are generic operations!  That means) s
44.6 151 M
(that we may easily extend the types of expressons \(by adding new) s
44.6 139 M
(handlers to EVAL\) and the types of procedures \(by adding new handlers) s
44.6 127 M
(to APPLY\).) s
44.6 103 M
(Before beginning work on this problem set you should carefully read) s
44.6 91 M
(the code in interp.scm.) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Tue Mar 04 15:14:20 2014) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
44.6 679 M
(                    Using the generic interpreter) s
44.6 655 M
(Download the supplied code to a fresh directory in your computer.) s
44.6 643 M
(Get a fresh Scheme system, and load the file load.scm:) s
44.6 619 M
(   \(load "<your-code-directory>/load"\)) s
44.6 595 M
(Initialize the evaluator:) s
44.6 571 M
(   \(init\)) s
44.6 547 M
(You will get a prompt:) s
44.6 523 M
(   eval> ) s
44.6 499 M
(You can enter an expression at the prompt:) s
44.6 475 M
(   eval> \(define cube \(lambda \(x\) \(* x x x\)\)\)) s
44.6 463 M
(   cube) s
44.6 451 M
(   ) s
44.6 439 M
(   eval> \(cube 3\)) s
44.6 427 M
(   27) s
44.6 403 M
(The evaluator code we supplied does not have an error system of its) s
44.6 391 M
(own, so it reverts to the underlying Scheme error system.  \(Maybe an) s
44.6 379 M
(interesting little project?  It is worth understanding how to make) s
44.6 367 M
(exception-handling systems!\)  If you get an error, clear the error) s
44.6 355 M
(with two control Cs and then continue the evaluator with "\(go\)" at the) s
44.6 343 M
(Scheme.  If you redo "\(init\)" you will lose the definition of cube,) s
44.6 331 M
(because a new embedded environment will be made.) s
44.6 307 M
(   eval> \(cube a\)) s
44.6 295 M
(   ;Unbound variable a) s
44.6 283 M
(   ;Quit!) s
44.6 259 M
(   \(go\)) s
44.6 235 M
(   eval> \(cube 4\)) s
44.6 223 M
(   64) s
44.6 199 M
(   eval> \(define \(fib n\)) s
44.6 187 M
(            \(if \(< n 2\) n \(+ \(fib \(- n 1\)\) \(fib \(- n 2\)\)\)\)\)) s
44.6 175 M
(   fib) s
44.6 151 M
(   eval> \(fib 10\)) s
44.6 139 M
(   55) s
44.6 115 M
(You can always get out of the generic evaluator and get back to the) s
44.6 103 M
(underlying Scheme system by quitting \(with two control Cs\).) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Tue Mar 04 15:14:20 2014) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
44.6 679 M
(One may become confused when working with an interpreter embedded in) s
44.6 667 M
(the underlying Scheme system.  The code that you load into the) s
44.6 655 M
(underlying Scheme system is MIT Scheme code.  Your definitions define) s
44.6 643 M
(symbols in the underlying system with values that are defined with) s
44.6 631 M
(respect to the underlying system.  However, when you execute \(init\) or) s
44.6 619 M
(\(go\) you enter the embedded system.  The mapping of the symbols to) s
44.6 607 M
(values \(the environment\) is private to the embedded system.  However, ) s
44.6 595 M
(symbols, like car, that you did not define and have values in the) s
44.6 583 M
(underlying Scheme system have those values in the embedded system as) s
44.6 571 M
(well.  ) s
44.6 547 M
(To make changes to the embedded interpreter you must leave the) s
44.6 535 M
(embedded system and reenter the underlying Scheme system, by quitting) s
44.6 523 M
(\(with two control Cs\).  You can then reenter the embedded interpreter) s
44.6 511 M
(using either \(go\), if you want to retain the definitions you made in) s
44.6 499 M
(the embedded system, or \(init\), if you want to start from scratch.) s
44.6 475 M
(-------------) s
44.6 463 M
(Problem 4.1: Warmup) s
44.6 439 M
(In mathematical text a common abuse of notation is to identify a) s
44.6 427 M
(tuple of functions with a function that returns a tuple of values.) s
44.6 415 M
(For example, \(written in Lisp prefix form\)) s
44.6 391 M
( If   \(cos 0.6\) ==> 0.8253356149096783 ) s
44.6 379 M
( and  \(sin 0.6\) ==> 0.5646424733950354) s
44.6 355 M
( then we expect) s
44.6 331 M
( \(\(vector cos sin\) 0.6\) ==> #\(0.8253356149096783 0.5646424733950354\)) s
44.6 307 M
(This requires an extension to APPLY so it can handle Scheme vectors as) s
44.6 295 M
(a kind of function.  Make this extension; demonstrate it; show that it) s
44.6 283 M
(interoperates with more conventional code.) s
44.6 271 M
(-------------) s
44.6 223 M
(Notice that) s
44.6 199 M
(eval> \(map \(lambda \(x\) \(* x x\)\) '\(1 2 3\)\)) s
44.6 175 M
(DOES NOT WORK, if the map in this expression refers to the map) s
44.6 163 M
(procedure from the underlying Scheme system.  ) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Tue Mar 04 15:14:20 2014) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
44.6 679 M
(However, if we redefine map for our interpreter it does work:) s
44.6 655 M
(eval> \(define \(map f l\)) s
44.6 643 M
(        \(if \(null? l\)) s
44.6 631 M
(            '\(\)) s
44.6 619 M
(            \(cons \(f \(car l\)\) \(map f \(cdr l\)\)\)\)\)) s
44.6 607 M
(map) s
44.6 583 M
(eval> \(map \(lambda \(x\) \(* x x\)\) '\(1 2 3\)\)) s
44.6 571 M
(\(1 4 9\)) s
44.6 547 M
(-------------) s
44.6 535 M
(Problem 4.2: Interoperation problem) s
44.6 511 M
(Why does it not work to use the underlying procedures that take) s
44.6 499 M
(procedural arguments, such as map?  Explain.  Outline a strategy to) s
44.6 487 M
(fix the problem.  Implement your solution, if you are so inspired, BUT) s
44.6 475 M
(this is subtle to get right, so don't spend infinite time trying to) s
44.6 463 M
(make it work.) s
44.6 451 M
(-------------) s
44.6 415 M
(In Lisps, including Scheme, attempting to evaluate an unbound symbol) s
44.6 403 M
(is an unbound-variable error.  However, in some algebraic processes it) s
44.6 391 M
(is sensible to allow an unbound symbol to be a self-evaluating object.) s
44.6 379 M
(For example, if we generically extend arithmetic to build algebraic) s
44.6 367 M
(expressions with symbolic values, it is sometimes useful to allow the) s
44.6 355 M
(following: ) s
44.6 331 M
(\(+ \(* 2 3\) \(* 4 5\)\) ==> 26) s
44.6 307 M
(\(+ \(* a 3\) \(* 4 5\)\) ==> \(+ \(* a 3\) 20\)) s
44.6 283 M
(In this case, the symbol "a" is unbound and self-evaluating.  The) s
44.6 271 M
(operators "*" and "+" are extended to just build expressions when) s
44.6 259 M
(their arguments are not reducible to numbers.  ) s
44.6 235 M
(-------------) s
44.6 223 M
(Problem 4.3: Unbound-variable handling) s
44.6 199 M
(A. Make a generic extension to EVAL to allow this kind of behavior.) s
44.6 187 M
(In order to make this work with the numerical primitives \(+, *, -, /\)) s
44.6 175 M
(it is necessary to extend their behavior as well.  Note that these) s
44.6 163 M
(operators should be changed in the underlying Scheme environment.  As) s
44.6 151 M
(we found in problem 4.2, the generic operator mechanism must be given) s
44.6 139 M
(handlers that work in the underlying Scheme system.) s
44.6 115 M
(B. Also augment APPLY to allow literal functions, known only by their) s
44.6 103 M
(names: \(+ \(f 3\) \(* 4 5\)\) ==> \(+ \(f 3\) 20\)) s
44.6 79 M
(These extensions to EVAL and APPLY are generally dangerous, because) s
44.6 67 M
(they hide real unbound-variable errors.  Make them contingent on the) s
44.6 55 M
(value of a user-settable variable: ALLOW-SELF-EVALUATING-SYMBOLS.) s
44.6 43 M
(-------------) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Tue Mar 04 15:14:20 2014) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
44.6 679 M
(Much more powerful extensions are available once we accept generic) s
44.6 667 M
(operations at this level.  For example, we can allow procedures to) s
44.6 655 M
(have both strict and non-strict arguments.  ) s
44.6 631 M
(   If you don't know what we are talking about here please read ) s
44.6 619 M
(   the article: http://en.wikipedia.org/wiki/Evaluation_strategy.) s
44.6 595 M
(If you load the file general-procedures.scm into the underlying) s
44.6 583 M
(Scheme, after loading \(with '\(load "load"\)'\) the generic interpreter,) s
44.6 571 M
(you will find that there are extensions that allow us to define) s
44.6 559 M
(procedures with some formal parameters asking for the matching) s
44.6 547 M
(arguments to be lazy \(or both lazy and memoized\).  Other undecorated) s
44.6 535 M
(parameters take their arguments strictly.  These extensions make it) s
44.6 523 M
(relatively easy to play otherwise painful games.  For example, we may) s
44.6 511 M
(define the UNLESS conditional as an ordinary procedure:) s
44.6 487 M
(   ;Quit!) s
44.6 463 M
(   \(load "general-procedures" generic-evaluation-environment\)) s
44.6 451 M
(   ;Loading "general-procedures.scm"... ) s
44.6 439 M
(   ;Warning: Replacing top-level handler) s
44.6 427 M
(   ;... done) s
44.6 415 M
(   ;Value: #[compound-procedure 17 operator]) s
44.6 379 M
(   \(go\)) s
44.6 355 M
(   eval> \(define unless) s
44.6 343 M
(           \(lambda \(condition \(usual lazy\) \(exception lazy\)\)) s
44.6 331 M
(             \(if condition exception usual\)\)\)) s
44.6 307 M
(We may use the usual define abbreviations \(see syntax.scm\):) s
44.6 283 M
(   eval> \(define \(unless condition \(usual lazy\) \(exception lazy\)\)) s
44.6 271 M
(           \(if condition exception usual\)\)) s
44.6 259 M
(   unless) s
44.6 235 M
(   eval> \(define \(ffib n\)) s
44.6 223 M
(           \(unless \(< n 2\)) s
44.6 211 M
(                   \(+ \(ffib \(- n 1\)\) \(ffib \(- n 2\)\)\)) s
44.6 199 M
(                   n\)\)) s
44.6 187 M
(   ffib) s
44.6 163 M
(   eval> \(ffib 10\)) s
44.6 151 M
(   55) s
44.6 127 M
(Notice that UNLESS is declared to be strict in its first argument \(the) s
44.6 115 M
(predicate\) but nonstrict in the alternatives: neither alternative will) s
44.6 103 M
(be evaluated until it is necessary.) s
_R
S
%%Page: (6) 6
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Tue Mar 04 15:14:20 2014) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
44.6 679 M
(Additionally, if we include the file kons.scm we get a special form) s
44.6 667 M
(that is the non-strict memoized version of CONS.  This immediately) s
44.6 655 M
(gives us the power of infinite streams:) s
44.6 631 M
(   ;Quit!) s
44.6 607 M
(   \(load "kons" generic-evaluation-environment\)) s
44.6 595 M
(   ;Loading "kons.scm"... done) s
44.6 583 M
(   ;Value: #[compound-procedure 19 operator]) s
44.6 559 M
(   \(go\)) s
44.6 535 M
(   eval> \(define \(add-streams s1 s2\)) s
44.6 523 M
(           \(kons \(+ \(car s1\) \(car s2\)\)) s
44.6 511 M
(                 \(add-streams \(cdr s1\) \(cdr s2\)\)\)\)) s
44.6 499 M
(   add-streams) s
44.6 475 M
(   eval> \(define \(ref-stream stream n\)) s
44.6 463 M
(           \(if \(= n 0\)) s
44.6 451 M
(               \(car stream\)) s
44.6 439 M
(               \(ref-stream \(cdr stream\) \(- n 1\)\)\)\)) s
44.6 427 M
(   ref-stream) s
44.6 403 M
(   eval> \(define fibs) s
44.6 391 M
(           \(kons 0) s
44.6 379 M
(                 \(kons 1) s
44.6 367 M
(                       \(add-streams \(cdr fibs\) fibs\)\)\)\)) s
44.6 355 M
(   fibs) s
44.6 331 M
(   eval> \(ref-stream fibs 10\)) s
44.6 319 M
(   55) s
44.6 295 M
(   eval> \(ref-stream fibs 20\)) s
44.6 283 M
(   6765) s
44.6 259 M
(   eval> \(ref-stream fibs 30\)) s
44.6 247 M
(   832040) s
44.6 223 M
(   eval> \(ref-stream fibs 40\)) s
44.6 211 M
(   102334155) s
_R
S
%%Page: (7) 7
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Tue Mar 04 15:14:20 2014) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
44.6 679 M
(-------------) s
44.6 667 M
(Problem 4.4: Streams) s
44.6 643 M
(a. The non-strict procedure KONS adds great power to the system.) s
44.6 631 M
(Notice that there is no need to make CAR or CDR different to obtain) s
44.6 619 M
(the use of streams.  In a short paragraph explain why KONS is almost) s
44.6 607 M
(sufficient.  It may be instructive to read an ancient paper by) s
44.6 595 M
(Friedman and Wise:) s
44.6 583 M
(   www.cs.indiana.edu/cgi-bin/techreports/TRNNN.cgi?trnum=TR44) s
44.6 559 M
(b. Unfortunately, the addition of KONS does not, in itself, solve all) s
44.6 547 M
(stream problems.  For example, the difficulty alluded to in SICP) s
44.6 535 M
(section 4.2.3 \(p. 411\) does not automatically dissipate.  If we make) s
44.6 523 M
(the following definitions:) s
44.6 499 M
(   \(define \(map-stream proc items\)) s
44.6 487 M
(     \(kons \(proc \(car items\)\)) s
44.6 475 M
(           \(map-stream proc \(cdr items\)\)\)\)) s
44.6 451 M
(   \(define \(scale-stream items factor\)) s
44.6 439 M
(     \(map-stream \(lambda \(x\) \(* x factor\)\)) s
44.6 427 M
(                 items\)\)) s
44.6 403 M
(   \(define \(integral integrand initial-value dt\)) s
44.6 391 M
(     \(define int) s
44.6 379 M
(       \(kons initial-value) s
44.6 367 M
(             \(add-streams \(scale-stream integrand dt\)) s
44.6 355 M
(                          int\)\)\)) s
44.6 343 M
(     int\)) s
44.6 319 M
(   \(define \(solve f y0 dt\)) s
44.6 307 M
(     \(define y \(integral dy y0 dt\)\)) s
44.6 295 M
(     \(define dy \(map-stream f y\)\)) s
44.6 283 M
(     y\)) s
44.6 259 M
(and then we try:) s
44.6 235 M
(   \(ref-stream \(solve \(lambda \(x\) x\) 1 0.001\) 1000\)) s
44.6 211 M
(we will get an error \(try it!\).  Why?  Explain the error.  What other) s
44.6 199 M
(declarations should be made in these stream-procedure definitions to) s
44.6 187 M
(fix all such errors?) s
44.6 175 M
(-------------) s
_R
S
%%Page: (8) 8
%%BeginPageSetup
_S
18 36 translate
/pagenum 8 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Tue Mar 04 15:14:20 2014) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
44.6 679 M
(-------------) s
44.6 667 M
(Problem 4.5: Why not?) s
44.6 643 M
(a. The KONS special form is equivalent to a CONS with both arguments) s
44.6 631 M
(lazy and memoized.  If the arguments were not memoized the computation) s
44.6 619 M
(\(ref-stream fibs 40\) in Problem 4.3a above would take a very long) s
44.6 607 M
(time.  Is there ever any advantage to not memoizing?  When might it) s
44.6 595 M
(matter?) s
44.6 571 M
(b. Why, given that CONS is a strict procedure imported from Scheme,) s
44.6 559 M
(could we not have defined KONS simply as:) s
44.6 535 M
(   \(define \(kons \(a lazy memo\) \(d lazy memo\)\)) s
44.6 523 M
(     \(cons a d\)\)) s
44.6 511 M
(?) s
44.6 487 M
(c. More generally, the Lisp community has avoided changing CONS to be) s
44.6 475 M
(KONS, as recommended by Friedman and Wise.  What potentially serious) s
44.6 463 M
(problems are avoided by using CONS rather than KONS?  Assume that we) s
44.6 451 M
(do not care about small constant factors in performance.) s
44.6 439 M
(-------------) s
44.6 403 M
(-------------) s
44.6 391 M
(Problem 4.6: Your turn) s
44.6 367 M
(Invent some fun, interesting construct that can easily be implemented) s
44.6 355 M
(using generic EVAL/APPLY that would be rather painful without that) s
44.6 343 M
(kind of generic support.  Show us the construct, the implementation,) s
44.6 331 M
(and some illustrative examples.  Enjoy!) s
44.6 319 M
(-------------) s
_R
S
%%Trailer
%%Pages: 8
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
