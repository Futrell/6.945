%!PS-Adobe-3.0
%%BoundingBox: 18 36 594 756
%%Title: letter
%%Creator: GNU Enscript 1.6.5.2
%%CreationDate: Tue Mar 18 12:58:15 2014
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6.5 2
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6.5 2
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier-Bold /F-gs-font MF
/F-gs-font 11 11 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6.5 2

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 576 def
/d_page_h 720 def
/d_header_x 0 def
/d_header_y 705 def
/d_header_w 576 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 576 def
/d_footer_h 0 def
/d_output_w 576 def
/d_output_h 705 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(                MASSACHVSETTS INSTITVTE OF TECHNOLOGY) s
31.4 667 M
(      Department of Electrical Engineering and Computer Science) s
31.4 643 M
(                       6.945/6.S081 Spring 2014) s
31.4 631 M
(                            Problem Set 6) s
31.4 607 M
(   Issued: Wed. 19 March 2014               Due: Wed. 2 April 2014) s
31.4 571 M
(Readings:) s
31.4 559 M
(  SICP second edition) s
31.4 547 M
(     Section 4.3: AGAIN!) s
31.4 535 M
(        Variations on a Scheme--Nondeterministic Programming) s
31.4 511 M
(  Online MIT/GNU Scheme Documentation,) s
31.4 499 M
(     Section  2.3: Dynamic Binding - fluid-let) s
31.4 487 M
(     Section 12.4: Continuations   - call-with-current-continuation) s
31.4 475 M
(                                     & within-continuation) s
31.4 451 M
(  There is an entire bibliography of stuff about this on:) s
31.4 439 M
(     http://library.readscheme.org/page6.html) s
31.4 415 M
(Code:  load.scm, funco.scm, ambsch.scm \(attached\), stack-queue.scm,) s
31.4 403 M
(       examples.scm \(attached\)) s
31.4 367 M
(In this problem set we will introduce AMBSCH, which allows us to) s
31.4 355 M
(define AMB in any system that allows escape from expressions by giving) s
31.4 343 M
(the user's program access to the current continuation.  Thus a user's) s
31.4 331 M
(program need not build an embedded evaluator and incur the performance) s
31.4 319 M
(cost of such an evaluator.) s
31.4 283 M
(                    Fun with Current Continuation) s
31.4 259 M
(Before we can understand how the AMBSCH mechanism works we have to get) s
31.4 247 M
(deeper into continuations.  Explicit underlying continuations are one) s
31.4 235 M
(of the most powerful \(and the most dangerous\) tools of a programmer.) s
31.4 223 M
(Scheme provides the ability for a programmer to get the underlying) s
31.4 211 M
(continuation of an expression.  But most other languages do not) s
31.4 199 M
(support the use of first-class continuations.  \(Some other languages) s
31.4 187 M
(that do have first-class continuations include SML, Ruby, and) s
31.4 175 M
(Smalltalk.\)) s
31.4 151 M
(Whenever a Scheme expression is evaluated, a continuation exists that) s
31.4 139 M
(wants the result of the expression.  The continuation represents an) s
31.4 127 M
(entire \(default\) future for the computation.  If the expression is) s
31.4 115 M
(evaluated at top level, for example, the continuation will take the) s
31.4 103 M
(result, print it on the screen, prompt for the next input, evaluate) s
31.4 91 M
(it, and so on forever.  Most of the time the continuation includes) s
31.4 79 M
(actions specified by user code, as in a continuation that will take) s
31.4 67 M
(the result, multiply it by the value stored in a local variable, add) s
31.4 55 M
(seven, and give the answer to the top-level continuation to be) s
31.4 43 M
(printed.  Normally these ubiquitous continuations are hidden behind the) s
31.4 31 M
(scenes and programmers don't think much about them.  On the rare) s
31.4 19 M
(occasions that you may need to deal explicitly with continuations,) s
31.4 7 M
(call-with-current-continuation lets you do so by creating a procedure) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 691 M
(that acts just like the current continuation.) s
31.4 667 M
(See the on-line MIT/GNU Scheme Reference Manual, Section 12.4, for a) s
31.4 655 M
(detailed description of CALL-WITH-CURRENT-CONTINUATION.) s
31.4 631 M
(Explicit continuations may be powerful and sometimes useful, but they) s
31.4 619 M
(are rarely necessary.  One common usage case is for non-local exits.) s
31.4 607 M
(Another is for resuming a suspended computation for backtracking.  Yet) s
31.4 595 M
(another is coroutining \(which we will explore in a later problem set\).) s
31.4 559 M
(                   Continuations as Non-Local Exits) s
31.4 535 M
(Consider the following simple example of a non-local exit continuation) s
31.4 523 M
(\(adapted from the MIT/GNU Scheme Reference Manual [Section 12.4]\):) s
31.4 499 M
(     \(call-with-current-continuation) s
31.4 487 M
(      \(lambda \(exit\)) s
31.4 475 M
(        \(for-each \(lambda \(x\)) s
31.4 463 M
(                    \(if \(negative? x\) \(exit x\)\)\)) s
31.4 451 M
(                  '\(54 0 37 -3 245 -19\)\)     ; **) s
31.4 439 M
(        #t\)\)) s
31.4 427 M
(     ;Value: -3) s
31.4 403 M
(Because Scheme's for-each procedure walks the list in left-to-right) s
31.4 391 M
(order, the first negative element encountered is -3, which is) s
31.4 379 M
(immediately returned.  Had the list contained no negative numbers, the) s
31.4 367 M
(result would have been #t \(since the body of the lambda form is a) s
31.4 355 M
(sequence of two expressions, the for-each expression followed by #t\).) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(In a larger context, this might appear within some other form, like) s
31.4 667 M
(the following definition \(explained below\) in file "funco.scm":) s
31.4 643 M
(     \(define \(funco:first-negative list-of-numbers\)) s
31.4 631 M
(       \(call-with-current-continuation) s
31.4 619 M
(        \(lambda \(k_exit\)) s
31.4 607 M
(          \(or \(call-with-current-continuation) s
31.4 595 M
(               \(lambda \(k_shortcut\)) s
31.4 583 M
(                 \(for-each \(lambda \(n\)) s
31.4 571 M
(                             \(cond \(\(not \(number? n\)\)) s
31.4 559 M
(                                    \(pp `\(not-a-number: ,n\)\)) s
31.4 547 M
(                                    \(k_exit #f\)\)) s
31.4 535 M
(                                   \(\(negative? n\)) s
31.4 523 M
(                                    \(k_shortcut n\)\)) s
31.4 511 M
(                                   \(else) s
31.4 499 M
(                                    ':keep-looking\)\)\)) s
31.4 487 M
(                           list-of-numbers\)) s
31.4 475 M
(                 #f ;; Fall-through sentinel:  no negatives found.) s
31.4 463 M
(                 \)\)) s
31.4 451 M
(              ':no-negatives-found\)\)\)\)) s
31.4 427 M
(     #|) s
31.4 415 M
(     \(funco:first-negative '\(54 0 37 -3 245 -19\)\)) s
31.4 403 M
(     ;Value: -3) s
31.4 379 M
(     \(funco:first-negative '\(54 0 37  3 245  19\)\)) s
31.4 367 M
(     ;Value: :no-negatives-found) s
31.4 343 M
(     \(funco:first-negative '\(54 0 37 no 245 boo\)\)) s
31.4 331 M
(     \(not-a-number: no\)) s
31.4 319 M
(     ;Value: #f) s
31.4 307 M
(     |#) s
31.4 283 M
(This demonstrates nested continuations, where the outermost k_exit) s
31.4 271 M
(continuation exits the entire call to funco:first-negative while the) s
31.4 259 M
(inner k_shortcut continuation exits only to the enclosing disjunction) s
31.4 247 M
(\(or\), then continues from there.) s
31.4 223 M
(In short, if a continuation captured by call-with-current-continuation) s
31.4 211 M
(is ever invoked \(with value V\), then the computation will continue by) s
31.4 199 M
(returning V as the value of the call to call-with-current-continuation) s
31.4 187 M
(and resuming execution normally from there.  [This is a bit tricky so) s
31.4 175 M
(look at the code above and re-read this last sentence a couple times) s
31.4 163 M
(until it makes sense... and please suggest alternative wording that) s
31.4 151 M
(might be less quixotically obtuse.]) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(-------------) s
31.4 667 M
(Problem 6.1:) s
31.4 643 M
(A. Define a simple procedure, snark-hunt, that takes a tree of symbols) s
31.4 631 M
(   as argument and recursively descends it looking for the symbol) s
31.4 619 M
(   'snark at any leaf.  It should immediately halt and return #t if) s
31.4 607 M
(   one is found; #f otherwise.  Use call-with-current-continuation.) s
31.4 583 M
(   If it helps, feel free to assume that all input trees will be valid) s
31.4 571 M
(   non-null lists of tree-or-symbol elements, or whatever other data) s
31.4 559 M
(   representation you find convenient.) s
31.4 535 M
(   E.g.,) s
31.4 511 M
(    \(snark-hunt '\(\(\(a b c\) d \(e f\)\) g \(\(\(snark . "oops"\) h\) \(i . j\)\)\)\)) s
31.4 499 M
(    ;Value: #t) s
31.4 475 M
(   Note that the dotted pairs in the above violate \(intentionally\) the) s
31.4 463 M
(   assumption that the input is comprised solely of proper lists of) s
31.4 451 M
(   tree-or-symbol elements, so overruns may well result in errors.) s
31.4 427 M
(B. How might you verify that it exits immediately rather than silently) s
31.4 415 M
(   returning through multiple return levels?  Define a new procedure,) s
31.4 403 M
(   snark-hunt/instrumented, to demonstrate this.  [Hint:  setting an) s
31.4 391 M
(   exit status flag then signaling an error on wayward return paths) s
31.4 379 M
(   might work if placed carefully, but simply tracing via pp may be) s
31.4 367 M
(   easier.  Whatever quick and dirty hack that works will do.  The) s
31.4 355 M
(   goal here is to build your intuition about continuations, not to) s
31.4 343 M
(   ship product-quality code.  Briefly explain your strategy.]) s
31.4 331 M
(-------------) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(                    Continuations for Backtracking) s
31.4 655 M
(The preceding was somewhat simplistic since the continuations captured) s
31.4 643 M
(were used only for non-local exits.  Specifically, they were not used) s
31.4 631 M
(for backtracking.  Moreover, they were never re-entered once invoked.) s
31.4 607 M
(Now consider the following slightly more interesting scenario:) s
31.4 583 M
(     \(define *k_re-funco*\)) s
31.4 571 M
(     \(define       funco\)) s
31.4 547 M
(     #|) s
31.4 535 M
(     \(begin) s
31.4 523 M
(       \(set! funco \(+ 2 \(call-with-current-continuation) s
31.4 511 M
(                         \(lambda \(k_re-funco\)) s
31.4 499 M
(                           \(set! *k_re-funco* k_re-funco\)) s
31.4 487 M
(                           3\)\)\)\)) s
31.4 475 M
(       ':ok\)) s
31.4 463 M
(     ;Value: :ok) s
31.4 439 M
(     funco) s
31.4 427 M
(     ;Value: 5) s
31.4 403 M
(     \(*k_re-funco* 4\)) s
31.4 391 M
(     ;Value: :ok) s
31.4 367 M
(     funco) s
31.4 355 M
(     ;Value: 6) s
31.4 331 M
(     \(*k_re-funco* 5\)) s
31.4 319 M
(     ;Value: :ok) s
31.4 295 M
(     funco) s
31.4 283 M
(     ;Value: 7) s
31.4 271 M
(     |#) s
31.4 247 M
(Note carefully how re-entering this captured continuation returns) s
31.4 235 M
(control to the point before the add and, therefore, before assigning) s
31.4 223 M
(variable funco and returning the symbol ':ok.  This is why invoking it) s
31.4 211 M
(always returns the symbol ':ok, not the value passed to the exported) s
31.4 199 M
(continuation being re-entered \(obviously\) and not the new value to) s
31.4 187 M
(which that variable is re-assigned nor its old value nor unspecific.) s
31.4 163 M
(This and the other examples in file "funco.scm" \(attached\) demonstrate) s
31.4 151 M
(how to re-enter a captured continuation to proceed from intermediate) s
31.4 139 M
(return points.  This mechanism is used for backtracking in "ambsch.scm".) s
_R
S
%%Page: (6) 6
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(                  Continuations and Dynamic Contexts) s
31.4 655 M
(We've already seen a few instances of dynamic binding via FLUID-LET in) s
31.4 643 M
(lecture.  Although assignment violates referential transparency, fluid) s
31.4 631 M
(binding can be handy for locally overriding a free variable's value.) s
31.4 607 M
(For example, consider the following code fragment:) s
31.4 583 M
(     \(define *trace?* #f\)) s
31.4 559 M
(     \(define \(foo x\)) s
31.4 547 M
(       \(set! *trace?* #t\)) s
31.4 535 M
(       \(let \(\(result \(bar x\)\)\) ;; bar may pp status when *trace?* set) s
31.4 523 M
(         \(set! *trace?* #f\)) s
31.4 511 M
(         result\)\)) s
31.4 487 M
(This works as expected only so long as bar does not capture and export) s
31.4 475 M
(a continuation that can be used to re-enter bar's body.  Moreover, if) s
31.4 463 M
(bar exits by invoking a continuation that bypasses the normal return) s
31.4 451 M
(mechanism that LET-binds result, the *trace?* flag may not be reset on) s
31.4 439 M
(the way out.  Worse, this presumes *trace?* is always #f on entry.) s
31.4 415 M
(To handle side-effects like this in the face of \(possibly hidden\)) s
31.4 403 M
(first-class continuations, a new dynamic binding form named FLUID-LET) s
31.4 391 M
(is provided that assigns \(rather than LET-binds\) variables on entry) s
31.4 379 M
(and reassigns them to their previous values upon exit, whether exiting) s
31.4 367 M
(via the normal return mechanism or through some captured continuation.) s
31.4 343 M
(Thus, FLUID-LET allows parameterization of subsystems with a condition) s
31.4 331 M
(that is in effect over a controlled time interval \(an extent\) rather) s
31.4 319 M
(than over a lexically apparent textual region of code \(a scope\).) s
31.4 295 M
(The FLUID-LET special form is documented in the on-line MIT/GNU Scheme) s
31.4 283 M
(Reference Manual, Section 2.3 Dynamic Binding \(q.v.\).) s
31.4 259 M
(In this case, for example, the expected behavior can be achieved by) s
31.4 247 M
(rewriting the above code fragment as:) s
31.4 223 M
(     \(define \(foo x\)) s
31.4 211 M
(       \(fluid-let \(\(*trace?* #t\)\)) s
31.4 199 M
(         \(bar x\)\)\)) s
31.4 175 M
(This mechanism is used in a few places in "ambsch.scm" to allow) s
31.4 163 M
(arbitrary nesting of depth-first verse breadth-first scheduling.) s
31.4 151 M
(It is also used by the mildly hackish amb-collect-values device.) s
_R
S
%%Page: (7) 7
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(               Dynamic Contexts and Within-Continuation) s
31.4 655 M
(The story gets really interesting when we define a thunk \(a procedure) s
31.4 643 M
(of no arguments\) at some control point in order to delay evaluation of) s
31.4 631 M
(its body, but we wish to invoke it in the dynamic context of its) s
31.4 619 M
(definition's control point, not the dynamic context in flight at its) s
31.4 607 M
(eventual point of call.) s
31.4 583 M
(For example, consider the following slightly contrived code fragment:) s
31.4 559 M
(     \(define \(funco:test-k-thunk k-thunk\)) s
31.4 547 M
(       \(let \(\(*foo* 2\)\)                      ;----------------------.) s
31.4 535 M
(         \(define \(foo-thunk\) *foo*\)          ; *foo* is 2 out here. :) s
31.4 523 M
(         \(call-with-current-continuation     ;                      :) s
31.4 511 M
(          \(lambda \(k\)                        ;                      :) s
31.4 499 M
(            \(fluid-let \(\(*foo* 3\)\)   ;---------------------.        :) s
31.4 487 M
(              \(k-thunk k foo-thunk\)  ; *foo* is 3 in here. :        :) s
31.4 475 M
(              \)                      ;---------------------'        :) s
31.4 463 M
(            \)\)                               ; *foo* is 2 out here. :) s
31.4 451 M
(         \)\)                                  ;----------------------') s
31.4 427 M
(     #|) s
31.4 415 M
(     \(funco:test-k-thunk \(lambda \(k thunk\)) s
31.4 403 M
(                           \(k \(thunk\)\)\)\)) s
31.4 391 M
(     ;Value: 3) s
31.4 367 M
(     \(funco:test-k-thunk \(lambda \(k thunk\)) s
31.4 355 M
(                           \(within-continuation k thunk\)\)\)) s
31.4 343 M
(     ;Value: 2) s
31.4 331 M
(     |#) s
31.4 307 M
(The WITHIN-CONTINUATION procedure is documented in the MIT/GNU Scheme) s
31.4 295 M
(Reference Manual [Section 12.4]\).  In short, it unrolls the dynamic) s
31.4 283 M
(context to that of the continuation, k, before invoking the thunk, the) s
31.4 271 M
(result of which is then passed to the continuation, k.) s
31.4 247 M
(In "ambsch.scm", WITHIN-CONTINUATION is used to ensure that sibling) s
31.4 235 M
(AMB arguments are called in the dynamic context in which they were) s
31.4 223 M
(introduced, not the dynamic context in which they are eventually) s
31.4 211 M
(invoked.  ) s
31.4 187 M
(The use of WITHIN-CONTINUATION ensures that each AMB alternative) s
31.4 175 M
(backtracks to appropriate nested search strategy.  It also avoids the) s
31.4 163 M
(unnecessary accumulation of control state when exploring alternatives.) s
_R
S
%%Page: (8) 8
%%BeginPageSetup
_S
18 36 translate
/pagenum 8 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(                      From Continuations to AMB) s
31.4 655 M
(Now that we have had experience with explicit expression continuations) s
31.4 643 M
(we can begin to understand the code in "ambsch.scm".  The heart of the) s
31.4 631 M
(backtracker is amb-list, which takes a sequence of sibling thunks,) s
31.4 619 M
(each representing an alternative value for the amb expression.  The) s
31.4 607 M
(thunks were produced by the amb macro, which syntactically transforms) s
31.4 595 M
(amb expressions into amb-list expressions, as follows:) s
31.4 571 M
(     \(amb <e1> ... <en>\) ==>) s
31.4 559 M
(       \(amb-list \(list \(lambda \(\) <e1>\) ... \(lambda \(\) <en>\)\)\)) s
31.4 535 M
(The search schedule maintains an agenda of thunks that proceed the) s
31.4 523 M
(computation when it is necessary for an amb expression to return with) s
31.4 511 M
(a new alternative value.  For a particular amb expression these thunks) s
31.4 499 M
(are constructed so as to return from that amb expression, using the) s
31.4 487 M
(continuation, k, captured at the entrance to its enclosing amb-list.) s
31.4 475 M
(The within-continuation expression, which is almost equivalent to the) s
31.4 463 M
(call \(k \(alternative\)\), prevents the capture of pieces of the control) s
31.4 451 M
(stack that are unnecessary for continuing the computation correctly.) s
31.4 427 M
(Amb-list first adds the returners for its alternative values to the) s
31.4 415 M
(search schedule and then yields control to the first pending returner.) s
31.4 391 M
(     \(define \(amb-list alternatives\)) s
31.4 379 M
(       \(if \(null? alternatives\)) s
31.4 367 M
(           \(set! *number-of-calls-to-fail*) s
31.4 355 M
(                 \(+ *number-of-calls-to-fail* 1\)\)\)) s
31.4 343 M
(       \(call-with-current-continuation) s
31.4 331 M
(        \(lambda \(k\)) s
31.4 319 M
(          \(add-to-search-schedule) s
31.4 307 M
(           \(map \(lambda \(alternative\)) s
31.4 295 M
(                  \(lambda \(\)) s
31.4 283 M
(                    \(within-continuation k alternative\)\)\)) s
31.4 271 M
(                alternatives\)\)) s
31.4 259 M
(          \(yield\)\)\)\)) s
31.4 223 M
(     \(define \(yield\)) s
31.4 211 M
(       \(if \(stack&queue-empty? *search-schedule*\)) s
31.4 199 M
(           \(*top-level* #f\)) s
31.4 187 M
(           \(\(pop! *search-schedule*\)\)\)\)) s
31.4 151 M
(Note that procedure add-to-search-schedule is fluid bound either to) s
31.4 139 M
(add-to-depth-first-search-schedule \(the default behavior\) or else to) s
31.4 127 M
(add-to-breadth-first-search-schedule.  See "ambsch.scm" for details.) s
_R
S
%%Page: (9) 9
%%BeginPageSetup
_S
18 36 translate
/pagenum 9 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (9) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(                          Breadth -v- Depth) s
31.4 655 M
(Consider the following experiment:) s
31.4 631 M
(     \(define \(a-pythagorean-triple-between low high\)) s
31.4 619 M
(       \(let \(\(i \(an-integer-between low high\)\)\)) s
31.4 607 M
(         \(let \(\(j \(an-integer-between i high\)\)\)) s
31.4 595 M
(           \(let \(\(k \(an-integer-between j high\)\)\)) s
31.4 583 M
(             \(set! count \(+ count 1\)\)                   ; **) s
31.4 571 M
(             \(require \(= \(+ \(* i i\) \(* j j\)\) \(* k k\)\)\)) s
31.4 559 M
(             \(list i j k\)\)\)\)\)) s
31.4 535 M
(     \(define count 0\)) s
31.4 523 M
(     #|) s
31.4 511 M
(     \(begin) s
31.4 499 M
(       \(init-amb\)) s
31.4 487 M
(       \(set! count 0\)) s
31.4 475 M
(       \(with-breadth-first-schedule) s
31.4 463 M
(         \(lambda \(\) \(pp \(a-pythagorean-triple-between 10 20\)\)\)\)\)) s
31.4 451 M
(     \(12 16 20\)) s
31.4 427 M
(     count) s
31.4 415 M
(     ;Value: 246) s
31.4 391 M
(     *number-of-calls-to-fail*) s
31.4 379 M
(     ;Value: 282) s
31.4 343 M
(     \(begin) s
31.4 331 M
(       \(init-amb\)) s
31.4 319 M
(       \(set! count 0\)) s
31.4 307 M
(       \(with-depth-first-schedule) s
31.4 295 M
(         \(lambda \(\) \(pp \(a-pythagorean-triple-between 10 20\)\)\)\)\)) s
31.4 283 M
(     \(12 16 20\)) s
31.4 259 M
(     count) s
31.4 247 M
(     ;Value: 156) s
31.4 223 M
(     *number-of-calls-to-fail*) s
31.4 211 M
(     ;Value: 182) s
31.4 199 M
(     |#) s
31.4 175 M
(-------------) s
31.4 163 M
(Problem 6.2:) s
31.4 139 M
(Explain the different counts between depth-first and breadth-first) s
31.4 127 M
(\(in rough terms, not the exact counts\).) s
31.4 103 M
(Also, where are the extra calls to fail coming from?) s
31.4 79 M
(Considering that the breadth-first search does more work, why is the) s
31.4 67 M
(a-pythagorean-triple-from search [AX 3.f in "ambsch.scm"] not usable) s
31.4 55 M
(under the depth-first search strategy?) s
31.4 43 M
(-------------) s
_R
S
%%Page: (10) 10
%%BeginPageSetup
_S
18 36 translate
/pagenum 10 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (10) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(                  Less Deterministic Non-Determinism) s
31.4 655 M
(Eva Lu Ator chides that a criticism one might make of our AMB) s
31.4 643 M
(implementation is that it's not as non-deterministic as one might) s
31.4 631 M
(sometimes like.  Specifically, given a list of alternatives in an AMB) s
31.4 619 M
(form, we always choose the leftmost alternative first then the second) s
31.4 607 M
(leftmost and so on in left-to-right order.) s
31.4 583 M
(She suggests that one might wish to override this choice, say, with) s
31.4 571 M
(right-to-left alternation or even in random order.  Specifically,) s
31.4 559 M
(she'd like something like:) s
31.4 535 M
(     \(with-left-to-right-alternation <thunk>\)) s
31.4 523 M
(     \(with-right-to-left-alternation <thunk>\)) s
31.4 511 M
(     \(with-random-order-alternation  <thunk>\)) s
31.4 487 M
(She's quick to point out that this choice is independent of the choice) s
31.4 475 M
(of depth-first or breadth-first \(or whatever else\) search order one) s
31.4 463 M
(might choose.) s
31.4 439 M
(-------------) s
31.4 427 M
(Problem 6.3:) s
31.4 403 M
(A. Under what circumstances might you want an unordered \(random\) AMB?) s
31.4 391 M
(   Craft a specific short example to use as a test case below.) s
31.4 367 M
(B. Implement these three alternatives and give an example use of each.) s
31.4 355 M
(   For simplicity and uniformity, model your code after that for) s
31.4 343 M
(   with-depth-first-schedule, add-to-depth-first-search-schedule, etc.) s
31.4 331 M
(   [Hint:  Feel free to use the native MIT Scheme RANDOM procedure.]) s
31.4 319 M
(-------------) s
_R
S
%%Page: (11) 11
%%BeginPageSetup
_S
18 36 translate
/pagenum 11 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (11) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(                         Neurological Origami) s
31.4 655 M
(Consider the following brain twister:) s
31.4 631 M
(     \(define moby-brain-twister-test) s
31.4 619 M
(       \(lambda \(\)) s
31.4 607 M
(         \(let \(\(x\) \(y\) \(z\)\)) s
31.4 595 M
(           \(set! x \(amb 1 2 3\)\)) s
31.4 583 M
(           \(pp \(list x\)\)) s
31.4 571 M
(           \(set! y \(amb 'a 'b\)\)) s
31.4 559 M
(           \(pp \(list x y\)\)) s
31.4 547 M
(           \(set! z \(amb #t #f\)\)) s
31.4 535 M
(           \(pp \(list x y z\)\)) s
31.4 523 M
(           \(amb\)\)\)\)) s
31.4 511 M
(     #|) s
31.4 499 M
(     \(with-breadth-first-schedule moby-brain-twister-test\)) s
31.4 487 M
(     \(1\)) s
31.4 475 M
(     \(2\)) s
31.4 463 M
(     \(3\)) s
31.4 451 M
(     \(3 a\)) s
31.4 439 M
(     \(3 b\)) s
31.4 427 M
(     \(3 a\)) s
31.4 415 M
(     \(3 b\)) s
31.4 403 M
(     \(3 a\)) s
31.4 391 M
(     \(3 b\)) s
31.4 379 M
(     \(3 b #t\)) s
31.4 367 M
(     \(3 b #f\)) s
31.4 355 M
(     \(3 b #t\)) s
31.4 343 M
(     \(3 b #f\)) s
31.4 331 M
(     \(3 b #t\)) s
31.4 319 M
(     \(3 b #f\)) s
31.4 307 M
(     \(3 b #t\)) s
31.4 295 M
(     \(3 b #f\)) s
31.4 283 M
(     \(3 b #t\)) s
31.4 271 M
(     \(3 b #f\)) s
31.4 259 M
(     \(3 b #t\)) s
31.4 247 M
(     \(3 b #f\)) s
31.4 235 M
(     ;Value: #f) s
31.4 223 M
(     |#) s
31.4 199 M
(Contrast this trace with the breadth-first elementary backtrack test) s
31.4 187 M
(AMB example from "ambsch.scm" [viz., AX 1.b].) s
31.4 163 M
(-------------) s
31.4 151 M
(Problem 6.4:) s
31.4 127 M
(Why does this weird thing happen?) s
31.4 103 M
(The explanation is very simple, but this took us many hours to) s
31.4 91 M
(understand.) s
31.4 67 M
([Hint:  Look at \(with-depth-first-schedule moby-brain-twister-test\).]) s
31.4 55 M
(-------------) s
_R
S
%%Page: (12) 12
%%BeginPageSetup
_S
18 36 translate
/pagenum 12 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (12) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(                      Potential Project Topics) s
31.4 655 M
(-------------) s
31.4 643 M
(Problem 6.5:  \(optional!\)) s
31.4 619 M
(In the ``Continuations and Dynamic Contexts'' discussion section) s
31.4 607 M
(above, it was claimed that the breadth-first and depth-first search) s
31.4 595 M
(strategies can be arbitrarily nested within AMB forms.) s
31.4 571 M
(Does the nesting of depth-first and breadth-first scheduling work) s
31.4 559 M
(correctly as currently implemented in "ambsch.scm"?  Specifically,) s
31.4 547 M
(design an experiment that exposes the bug \(if there is one\) or that) s
31.4 535 M
(demonstrates anecdotally that it does work correctly \(if it does\).) s
31.4 523 M
(Explain your rationale.) s
31.4 499 M
(This involves crafting a couple experiments that distinguish between) s
31.4 487 M
(depth-first and breadth-first search strategies then composing them in) s
31.4 475 M
(interesting ways to demonstrate local control over nested searches.) s
31.4 451 M
(Identifying a natural class of problems for which this flexibility is) s
31.4 439 M
(useful--- not just hacked together to prove a point--- might be a fine) s
31.4 427 M
(topic for an independent project.  Don't spend too much time on it yet.) s
31.4 415 M
(-------------) s
31.4 379 M
(-------------) s
31.4 367 M
(Problem 6.6:  \(optional!\)) s
31.4 343 M
(At the end of the examples.scm file \(attached\) you will find a simple) s
31.4 331 M
(parser of "natural language."  Of course, this is really pretty crude.) s
31.4 319 M
(It is fun to see how much real language you could parse this way.  One) s
31.4 307 M
(possible extension, besides adding more rules and more words is to) s
31.4 295 M
(incorporate probabilistic information, such as the probability that a) s
31.4 283 M
(word appears as a particular part of speech or that common idiomatic) s
31.4 271 M
(expressions appear together.  ) s
31.4 247 M
(Unfortunately, there is no semantic attachment mechanism in this) s
31.4 235 M
(grammar.  This is the real stuff, but it is very hard \(and rather a) s
31.4 223 M
(matter of research.\)  If you are interested in this kind of work you) s
31.4 211 M
(should certainly look at the papers of Ray Jackendoff:) s
31.4 187 M
(      http://en.wikipedia.org/wiki/Ray_Jackendoff) s
31.4 163 M
(Make some interesting extensions to this grammar, or make a similar) s
31.4 151 M
(grammar for some other language you may know.) s
31.4 139 M
(-------------) s
_R
S
%%Page: (13) 13
%%BeginPageSetup
_S
18 36 translate
/pagenum 13 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (13) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(;;;; File:  ambsch.scm) s
31.4 667 M
(;;;; Extension of Scheme for amb) s
31.4 655 M
(;;;   amb is the ambiguous operator of McCarthy.) s
31.4 631 M
(;;; \(load "stack-queue.scm"\)) s
31.4 607 M
(\(define-syntax amb) s
31.4 595 M
(  \(sc-macro-transformer) s
31.4 583 M
(   \(lambda \(form uenv\)) s
31.4 571 M
(     `\(amb-list) s
31.4 559 M
(       \(list ,@\(map \(lambda \(arg\)) s
31.4 547 M
(                      `\(lambda \(\)) s
31.4 535 M
(                         ,\(close-syntax arg uenv\)\)\)) s
31.4 523 M
(                    \(cdr form\)\)\)\)\)\)\)) s
31.4 499 M
(\(define *number-of-calls-to-fail* 0\)    ;for metering.) s
31.4 475 M
(\(define \(amb-list alternatives\)) s
31.4 463 M
(  \(if \(null? alternatives\)) s
31.4 451 M
(      \(set! *number-of-calls-to-fail*) s
31.4 439 M
(            \(+ *number-of-calls-to-fail* 1\)\)\)) s
31.4 427 M
(  \(call-with-current-continuation) s
31.4 415 M
(   \(lambda \(k\)) s
31.4 403 M
(     \(add-to-search-schedule) s
31.4 391 M
(      \(map \(lambda \(alternative\)) s
31.4 379 M
(             \(lambda \(\)) s
31.4 367 M
(               \(within-continuation k alternative\)\)\)) s
31.4 355 M
(           alternatives\)\)) s
31.4 343 M
(     \(yield\)\)\)\)) s
31.4 307 M
(;;; amb-set! is an assignment operator) s
31.4 295 M
(;;;  that gets undone on backtracking.) s
31.4 271 M
(\(define-syntax amb-set!) s
31.4 259 M
(  \(sc-macro-transformer) s
31.4 247 M
(   \(lambda \(form uenv\)) s
31.4 235 M
(     \(compile-amb-set \(cadr form\) \(caddr form\) uenv\)\)\)\)) s
31.4 211 M
(\(define \(compile-amb-set var val-expr uenv\)) s
31.4 199 M
(  \(let \(\(var \(close-syntax var uenv\)\)) s
31.4 187 M
(        \(val \(close-syntax val-expr uenv\)\)\)) s
31.4 175 M
(    `\(let \(\(old-value ,var\)\)) s
31.4 163 M
(       \(effect-wrapper) s
31.4 151 M
(        \(lambda \(\)) s
31.4 139 M
(          \(set! ,var ,val\)\)) s
31.4 127 M
(        \(lambda \(\)) s
31.4 115 M
(          \(set! ,var old-value\)\)\)\)\)\)) s
31.4 79 M
(;;; A general wrapper for undoable effects) s
31.4 55 M
(\(define \(effect-wrapper doer undoer\)) s
31.4 43 M
(  \(force-next) s
31.4 31 M
(   \(lambda \(\) \(undoer\) \(yield\)\)\)) s
31.4 19 M
(  \(doer\)\)) s
_R
S
%%Page: (14) 14
%%BeginPageSetup
_S
18 36 translate
/pagenum 14 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (14) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(;;; Alternative search strategy wrappers) s
31.4 655 M
(\(define \(with-depth-first-schedule thunk\)) s
31.4 643 M
(  \(call-with-current-continuation) s
31.4 631 M
(   \(lambda \(k\)) s
31.4 619 M
(     \(fluid-let \(\(add-to-search-schedule) s
31.4 607 M
(                  add-to-depth-first-search-schedule\)) s
31.4 595 M
(                 \(*search-schedule* \(empty-search-schedule\)\)) s
31.4 583 M
(                 \(*top-level* k\)\)) s
31.4 571 M
(       \(thunk\)\)\)\)\)) s
31.4 547 M
(\(define \(with-breadth-first-schedule thunk\)) s
31.4 535 M
(  \(call-with-current-continuation) s
31.4 523 M
(   \(lambda \(k\)) s
31.4 511 M
(     \(fluid-let \(\(add-to-search-schedule) s
31.4 499 M
(                  add-to-breadth-first-search-schedule\)) s
31.4 487 M
(                 \(*search-schedule* \(empty-search-schedule\)\)) s
31.4 475 M
(                 \(*top-level* k\)\)) s
31.4 463 M
(       \(thunk\)\)\)\)\)) s
31.4 427 M
(;;; Representation of the search schedule) s
31.4 403 M
(\(define *search-schedule*\)) s
31.4 379 M
(\(define \(empty-search-schedule\)) s
31.4 367 M
(  \(make-stack&queue\)\)) s
31.4 343 M
(\(define \(yield\)) s
31.4 331 M
(  \(if \(stack&queue-empty? *search-schedule*\)) s
31.4 319 M
(      \(*top-level* #f\)) s
31.4 307 M
(      \(\(pop! *search-schedule*\)\)\)\)) s
31.4 283 M
(\(define \(force-next thunk\)) s
31.4 271 M
(  \(push! *search-schedule* thunk\)\)) s
31.4 247 M
(;;; Alternative search strategies) s
31.4 223 M
(\(define \(add-to-depth-first-search-schedule alternatives\)) s
31.4 211 M
(  \(for-each \(lambda \(alternative\)) s
31.4 199 M
(              \(push! *search-schedule* alternative\)\)) s
31.4 187 M
(            \(reverse alternatives\)\)\)) s
31.4 163 M
(\(define \(add-to-breadth-first-search-schedule alternatives\)) s
31.4 151 M
(  \(for-each \(lambda \(alternative\)) s
31.4 139 M
(              \(add-to-end! *search-schedule* alternative\)\)) s
31.4 127 M
(            alternatives\)\)) s
_R
S
%%Page: (15) 15
%%BeginPageSetup
_S
18 36 translate
/pagenum 15 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (15) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(;;; For incremental interactive experiments from REPL.) s
31.4 655 M
(\(define \(init-amb\)) s
31.4 643 M
(  \(set! *search-schedule* \(empty-search-schedule\)\)) s
31.4 631 M
(  \(set! *number-of-calls-to-fail* 0\)) s
31.4 619 M
(  'done\)) s
31.4 595 M
(\(define add-to-search-schedule ;; Default is depth 1st) s
31.4 583 M
(  add-to-depth-first-search-schedule\)) s
31.4 559 M
(\(define *top-level*) s
31.4 547 M
(  \(lambda \(ignore\)) s
31.4 535 M
(    \(display ";No more alternatives\\n"\)) s
31.4 523 M
(    \(abort->top-level unspecific\)\)\)) s
_R
S
%%Page: (16) 16
%%BeginPageSetup
_S
18 36 translate
/pagenum 16 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (16) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(;;; AX 1 - Elementary backtrack test.) s
31.4 655 M
(\(define elementary-backtrack-test) s
31.4 643 M
(  \(lambda \(\)) s
31.4 631 M
(    \(let \(\(x \(amb 1 2 3\)\)\)) s
31.4 619 M
(      \(pp \(list x\)\)) s
31.4 607 M
(      \(let \(\(y \(amb 'a 'b\)\)\)) s
31.4 595 M
(        \(pp \(list x y\)\)) s
31.4 583 M
(        \(let \(\(z \(amb #t #f\)\)\)) s
31.4 571 M
(          \(pp \(list x y z\)\)\)\)\)) s
31.4 559 M
(    \(amb\)\)\)) s
31.4 547 M
(#|) s
31.4 535 M
(;; AX 1.d - Elementary backtrack test.  [Depth First]) s
31.4 511 M
(\(with-depth-first-schedule elementary-backtrack-test\)) s
31.4 499 M
(\(1\)) s
31.4 487 M
(\(1 a\)) s
31.4 475 M
(\(1 a #t\)) s
31.4 463 M
(\(1 a #f\)) s
31.4 451 M
(\(1 b\)) s
31.4 439 M
(\(1 b #t\)) s
31.4 427 M
(\(1 b #f\)) s
31.4 415 M
(\(2\)) s
31.4 403 M
(\(2 a\)) s
31.4 391 M
(\(2 a #t\)) s
31.4 379 M
(\(2 a #f\)) s
31.4 367 M
(\(2 b\)) s
31.4 355 M
(\(2 b #t\)) s
31.4 343 M
(\(2 b #f\)) s
31.4 331 M
(\(3\)) s
31.4 319 M
(\(3 a\)) s
31.4 307 M
(\(3 a #t\)) s
31.4 295 M
(\(3 a #f\)) s
31.4 283 M
(\(3 b\)) s
31.4 271 M
(\(3 b #t\)) s
31.4 259 M
(\(3 b #f\)) s
31.4 247 M
(;Value: #f) s
_R
S
%%Page: (17) 17
%%BeginPageSetup
_S
18 36 translate
/pagenum 17 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (17) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(;; AX 1.b - Elementary backtrack test.  [Breadth First]) s
31.4 655 M
(\(with-breadth-first-schedule elementary-backtrack-test\)) s
31.4 643 M
(\(1\)) s
31.4 631 M
(\(2\)) s
31.4 619 M
(\(3\)) s
31.4 607 M
(\(1 a\)) s
31.4 595 M
(\(1 b\)) s
31.4 583 M
(\(2 a\)) s
31.4 571 M
(\(2 b\)) s
31.4 559 M
(\(3 a\)) s
31.4 547 M
(\(3 b\)) s
31.4 535 M
(\(1 a #t\)) s
31.4 523 M
(\(1 a #f\)) s
31.4 511 M
(\(1 b #t\)) s
31.4 499 M
(\(1 b #f\)) s
31.4 487 M
(\(2 a #t\)) s
31.4 475 M
(\(2 a #f\)) s
31.4 463 M
(\(2 b #t\)) s
31.4 451 M
(\(2 b #f\)) s
31.4 439 M
(\(3 a #t\)) s
31.4 427 M
(\(3 a #f\)) s
31.4 415 M
(\(3 b #t\)) s
31.4 403 M
(\(3 b #f\)) s
31.4 391 M
(;Value: #f) s
31.4 379 M
(|#) s
_R
S
%%Page: (18) 18
%%BeginPageSetup
_S
18 36 translate
/pagenum 18 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (18) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(;;; AX 2 - Testing undoable assignment.) s
31.4 655 M
(\(define testing-undoable-assignment) s
31.4 643 M
(  \(lambda \(\)) s
31.4 631 M
(    \(let \(\(x \(amb 1 2 3\)\) \(y 0\) \(z 0\)\)) s
31.4 619 M
(      \(pp `\(before ,x ,y ,z\)\)) s
31.4 607 M
(      \(amb-set! y x\)) s
31.4 595 M
(      \(pp `\(after ,x ,y ,z\)\)) s
31.4 583 M
(      \(amb-set! z \(amb 3.14 2.718\)\)) s
31.4 571 M
(      \(pp `\(zset ,x ,y ,z\)\)) s
31.4 559 M
(      \(amb-set! x \(+ y z\)\)) s
31.4 547 M
(      \(pp `\(xset ,x ,y ,z\)\)) s
31.4 535 M
(      \(amb\)\)\)\)) s
31.4 523 M
(#|) s
31.4 511 M
(;;; AX 2.d - Testing undoable assignment.  [Depth First]) s
31.4 487 M
(\(with-depth-first-schedule testing-undoable-assignment\)) s
31.4 475 M
(\(before 1 0 0\)) s
31.4 463 M
(\(after 1 1 0\)) s
31.4 451 M
(\(zset 1 1 3.14\)) s
31.4 439 M
(\(xset 4.140000000000001 1 3.14\)) s
31.4 427 M
(\(zset 1 1 2.718\)) s
31.4 415 M
(\(xset 3.718 1 2.718\)) s
31.4 403 M
(\(before 2 0 0\)) s
31.4 391 M
(\(after 2 2 0\)) s
31.4 379 M
(\(zset 2 2 3.14\)) s
31.4 367 M
(\(xset 5.140000000000001 2 3.14\)) s
31.4 355 M
(\(zset 2 2 2.718\)) s
31.4 343 M
(\(xset 4.718 2 2.718\)) s
31.4 331 M
(\(before 3 0 0\)) s
31.4 319 M
(\(after 3 3 0\)) s
31.4 307 M
(\(zset 3 3 3.14\)) s
31.4 295 M
(\(xset 6.140000000000001 3 3.14\)) s
31.4 283 M
(\(zset 3 3 2.718\)) s
31.4 271 M
(\(xset 5.718 3 2.718\)) s
31.4 259 M
(;Value: #f) s
31.4 247 M
(|#) s
_R
S
%%Page: (19) 19
%%BeginPageSetup
_S
18 36 translate
/pagenum 19 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (19) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(;;; AX 3 - Pythagorean triples) s
31.4 655 M
(;; In breadth-first we get useful results here.) s
31.4 643 M
(;; None from depth-first.) s
31.4 619 M
(;; AX 3.f - A Pythagorean triple from...) s
31.4 595 M
(\(define \(a-pythagorean-triple-from low\)) s
31.4 583 M
(  \(let \(\(i \(an-integer-from low\)\)\)) s
31.4 571 M
(    \(let \(\(j \(an-integer-from i\)\)\)) s
31.4 559 M
(      \(let \(\(k \(an-integer-from j\)\)\)) s
31.4 547 M
(        \(require \(= \(+ \(* i i\) \(* j j\)\) \(* k k\)\)\)) s
31.4 535 M
(        \(list i j k\)\)\)\)\)) s
31.4 511 M
(\(define \(require p\)) s
31.4 499 M
(  \(if \(not p\) \(amb\)\)\)) s
31.4 475 M
(\(define \(an-integer-from low\)) s
31.4 463 M
(  \(amb low \(an-integer-from \(+ low 1\)\)\)\)) s
31.4 439 M
(#|) s
31.4 427 M
(\(with-breadth-first-schedule) s
31.4 415 M
(    \(lambda \(\)) s
31.4 403 M
(      \(pp \(a-pythagorean-triple-from 1\)\)) s
31.4 391 M
(      \(amb\)\)\)) s
31.4 379 M
(\(3 4 5\)) s
31.4 367 M
(\(6 8 10\)) s
31.4 355 M
(\(5 12 13\)) s
31.4 343 M
(\(9 12 15\)) s
31.4 331 M
(\(8 15 17\)) s
31.4 319 M
(\(12 16 20\)) s
31.4 307 M
(\(7 24 25\)) s
31.4 295 M
(\(15 20 25\)) s
31.4 283 M
(\(10 24 26\)) s
31.4 271 M
(\(20 21 29\)) s
31.4 259 M
(\(18 24 30\)) s
31.4 247 M
(\(16 30 34\)) s
31.4 235 M
(\(21 28 35\)) s
31.4 223 M
(\(12 35 37\)) s
31.4 211 M
(\(15 36 39\)) s
31.4 199 M
(\(24 32 40\)) s
31.4 187 M
(\(9 40 41\)) s
31.4 175 M
(\(27 36 45\)) s
31.4 163 M
(\(14 48 50\)) s
31.4 151 M
(\(30 40 50\)) s
31.4 139 M
(\(24 45 51\)) s
31.4 127 M
(\(20 48 52\)) s
31.4 115 M
(\(28 45 53\)) s
31.4 103 M
(\(33 44 55\)) s
31.4 91 M
(\(40 42 58\)) s
31.4 79 M
(\(36 48 60\)) s
31.4 67 M
(\(11 60 61\)) s
31.4 55 M
(\(16 63 65\)) s
31.4 43 M
(;Quit!) s
31.4 31 M
(|#) s
_R
S
%%Page: (20) 20
%%BeginPageSetup
_S
18 36 translate
/pagenum 20 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (20) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(;; AX 3.b - A Pythagorean triple between...) s
31.4 655 M
(;; For example, for controlling search:) s
31.4 631 M
(\(define \(a-pythagorean-triple-between low high\)) s
31.4 619 M
(  \(let \(\(i \(an-integer-between low high\)\)\)) s
31.4 607 M
(    \(let \(\(j \(an-integer-between i high\)\)\)) s
31.4 595 M
(      \(let \(\(k \(an-integer-between j high\)\)\)) s
31.4 583 M
(        \(require \(= \(+ \(* i i\) \(* j j\)\) \(* k k\)\)\)) s
31.4 571 M
(        \(list i j k\)\)\)\)\)) s
31.4 547 M
(\(define \(an-integer-between low high\)) s
31.4 535 M
(  \(require \(<= low high\)\)) s
31.4 523 M
(  \(amb low) s
31.4 511 M
(       \(an-integer-between \(+ low 1\) high\)\)\)) s
31.4 487 M
(;; A useful device:) s
31.4 463 M
(\(define \(amb-collect-values result-thunk #!optional limit\)) s
31.4 451 M
(  \(call-with-current-continuation) s
31.4 439 M
(   \(lambda \(k\)) s
31.4 427 M
(     \(let \(\(values '\(\)\) \(count 0\)\)) s
31.4 415 M
(       \(fluid-let \(\(*top-level* \(lambda \(ignore\) \(k values\)\)\)) s
31.4 403 M
(                   \(*search-schedule* \(empty-search-schedule\)\)\)) s
31.4 391 M
(         \(let \(\(value \(result-thunk\)\)\)) s
31.4 379 M
(           \(set! values \(cons value values\)\)) s
31.4 367 M
(           \(set! count \(+ count 1\)\)) s
31.4 355 M
(           \(if \(and \(not \(default-object? limit\)\)) s
31.4 343 M
(                    \(>= count limit\)\)) s
31.4 331 M
(               \(k values\)\)) s
31.4 319 M
(           \(amb\)\)\)\)\)\)\)) s
31.4 307 M
(#|) s
31.4 295 M
(\(with-depth-first-schedule) s
31.4 283 M
(    \(lambda \(\)) s
31.4 271 M
(      \(let \(\(mid \(amb-collect-values) s
31.4 259 M
(                  \(lambda \(\)) s
31.4 247 M
(                    \(a-pythagorean-triple-between 1 20\)\)) s
31.4 235 M
(                  ;; I want only 3, and) s
31.4 223 M
(                  ;; I don't want to backtrack into this.) s
31.4 211 M
(                  3\)\)\)) s
31.4 199 M
(        \(pp \(list \(a-pythagorean-triple-between 1 10\)) s
31.4 187 M
(                  mid) s
31.4 175 M
(                  \(a-pythagorean-triple-between 10 30\)\)\)) s
31.4 163 M
(        \(amb\)\)\)\)) s
31.4 151 M
(\(\(3 4 5\) \(\(6 8 10\) \(5 12 13\) \(3 4 5\)\) \(10 24 26\)\)) s
31.4 139 M
(\(\(6 8 10\) \(\(6 8 10\) \(5 12 13\) \(3 4 5\)\) \(10 24 26\)\)) s
31.4 127 M
(\(\(3 4 5\) \(\(6 8 10\) \(5 12 13\) \(3 4 5\)\) \(12 16 20\)\)) s
31.4 115 M
(\(\(6 8 10\) \(\(6 8 10\) \(5 12 13\) \(3 4 5\)\) \(12 16 20\)\)) s
31.4 103 M
(\(\(3 4 5\) \(\(6 8 10\) \(5 12 13\) \(3 4 5\)\) \(15 20 25\)\)) s
31.4 91 M
(\(\(6 8 10\) \(\(6 8 10\) \(5 12 13\) \(3 4 5\)\) \(15 20 25\)\)) s
31.4 79 M
(\(\(3 4 5\) \(\(6 8 10\) \(5 12 13\) \(3 4 5\)\) \(18 24 30\)\)) s
31.4 67 M
(\(\(6 8 10\) \(\(6 8 10\) \(5 12 13\) \(3 4 5\)\) \(18 24 30\)\)) s
31.4 55 M
(\(\(3 4 5\) \(\(6 8 10\) \(5 12 13\) \(3 4 5\)\) \(20 21 29\)\)) s
31.4 43 M
(\(\(6 8 10\) \(\(6 8 10\) \(5 12 13\) \(3 4 5\)\) \(20 21 29\)\)) s
31.4 31 M
(;Value: #f) s
31.4 19 M
(|#) s
_R
S
%%Page: (21) 21
%%BeginPageSetup
_S
18 36 translate
/pagenum 21 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (21) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(;;;; File:  examples.scm) s
31.4 655 M
(;;; SICP Section 4.3.2 : Logic Puzzles) s
31.4 643 M
(;;;) s
31.4 631 M
(;;; Baker, Cooper, Fletcher, Miller, and Smith live on) s
31.4 619 M
(;;; different floors of a building that has only five) s
31.4 607 M
(;;; floors.  Baker does not live on the top floor.) s
31.4 595 M
(;;; Cooper does not live on the bottom floor.  Fletcher) s
31.4 583 M
(;;; does not live on either the top or the bottom) s
31.4 571 M
(;;; floor.  Miller lives on a higher floor than does) s
31.4 559 M
(;;; Cooper.  Smith does not live on a floor adjacent to) s
31.4 547 M
(;;; Fletcher's.  Fletcher does not live on a floor) s
31.4 535 M
(;;; adjacent to Cooper's.  Where does everyone live?) s
31.4 523 M
(;;;      \(From Dinesman, 1968\)) s
31.4 487 M
(\(define \(multiple-dwelling\)) s
31.4 475 M
(  \(let \(\(baker \(amb 1 2 3 4 5\)\)) s
31.4 463 M
(        \(cooper \(amb 1 2 3 4 5\)\)) s
31.4 451 M
(        \(fletcher \(amb 1 2 3 4 5\)\)) s
31.4 439 M
(        \(miller \(amb 1 2 3 4 5\)\)) s
31.4 427 M
(        \(smith \(amb 1 2 3 4 5\)\)\)) s
31.4 415 M
(    \(require) s
31.4 403 M
(     \(distinct?) s
31.4 391 M
(      \(list baker cooper fletcher miller smith\)\)\)) s
31.4 379 M
(    \(require \(not \(= baker 5\)\)\)) s
31.4 367 M
(    \(require \(not \(= cooper 1\)\)\)) s
31.4 355 M
(    \(require \(not \(= fletcher 5\)\)\)) s
31.4 343 M
(    \(require \(not \(= fletcher 1\)\)\)) s
31.4 331 M
(    \(require \(> miller cooper\)\)) s
31.4 319 M
(    \(require) s
31.4 307 M
(     \(not \(= \(abs \(- smith fletcher\)\) 1\)\)\)) s
31.4 295 M
(    \(require) s
31.4 283 M
(     \(not \(= \(abs \(- fletcher cooper\)\) 1\)\)\)) s
31.4 271 M
(    \(list \(list 'baker baker\)) s
31.4 259 M
(          \(list 'cooper cooper\)) s
31.4 247 M
(          \(list 'fletcher fletcher\)) s
31.4 235 M
(          \(list 'miller miller\)) s
31.4 223 M
(          \(list 'smith smith\)\)\)\)) s
31.4 199 M
(\(define \(distinct? items\)) s
31.4 187 M
(  \(cond \(\(null? items\) #t\)) s
31.4 175 M
(        \(\(null? \(cdr items\)\) #t\)) s
31.4 163 M
(        \(\(member \(car items\) \(cdr items\)\) #f\)) s
31.4 151 M
(        \(else \(distinct? \(cdr items\)\)\)\)\)) s
31.4 127 M
(#|) s
31.4 115 M
(\(init-amb\)) s
31.4 103 M
(;Value: done) s
31.4 79 M
(\(with-depth-first-schedule multiple-dwelling\)) s
31.4 67 M
(;Value: \(\(baker 3\) \(cooper 2\) \(fletcher 4\) \(miller 5\) \(smith 1\)\)) s
31.4 43 M
(\(amb\)) s
31.4 31 M
(;No more alternatives) s
31.4 19 M
(|#) s
_R
S
%%Page: (22) 22
%%BeginPageSetup
_S
18 36 translate
/pagenum 22 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (22) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(;;; From SICP Section 4.3.2) s
31.4 667 M
(;;; Parsing natural language) s
31.4 643 M
(\(define \(parse input\)) s
31.4 631 M
(  \(amb-set! *unparsed* input\)) s
31.4 619 M
(  \(let \(\(sent \(parse-sentence\)\)\)) s
31.4 607 M
(    \(require \(null? *unparsed*\)\)) s
31.4 595 M
(    sent\)\)) s
31.4 571 M
(\(define *unparsed* '\(\)\)) s
31.4 547 M
(\(define \(parse-sentence\)) s
31.4 535 M
(  \(let* \(\(np \(parse-noun-phrase\)\)) s
31.4 523 M
(         \(verb \(parse-verb-phrase\)\)\)) s
31.4 511 M
(    \(list 'sentence np verb\)\)\)) s
31.4 487 M
(\(define \(parse-noun-phrase\)) s
31.4 475 M
(  \(define \(maybe-extend noun-phrase\)) s
31.4 463 M
(    \(amb noun-phrase) s
31.4 451 M
(         \(maybe-extend) s
31.4 439 M
(          \(list 'noun-phrase) s
31.4 427 M
(                noun-phrase) s
31.4 415 M
(                \(parse-prepositional-phrase\)\)\)\)\)) s
31.4 403 M
(  \(maybe-extend \(parse-s-noun-phrase\)\)\)) s
31.4 379 M
(\(define \(parse-verb-phrase\)) s
31.4 367 M
(  \(define \(maybe-extend verb-phrase\)) s
31.4 355 M
(    \(amb verb-phrase) s
31.4 343 M
(         \(maybe-extend) s
31.4 331 M
(          \(list 'verb-phrase) s
31.4 319 M
(                verb-phrase) s
31.4 307 M
(                \(parse-prepositional-phrase\)\)\)\)\)) s
31.4 295 M
(  \(maybe-extend \(parse-word verbs\)\)\)) s
_R
S
%%Page: (23) 23
%%BeginPageSetup
_S
18 36 translate
/pagenum 23 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (23) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(\(define \(parse-s-noun-phrase\)) s
31.4 667 M
(  \(let* \(\(article \(parse-word articles\)\)) s
31.4 655 M
(         \(noun \(parse-word nouns\)\)\)) s
31.4 643 M
(    \(list 's-noun-phrase article noun\)\)\)) s
31.4 619 M
(\(define \(parse-prepositional-phrase\)) s
31.4 607 M
(  \(let* \(\(preposition) s
31.4 595 M
(          \(parse-word prepositions\)\)) s
31.4 583 M
(         \(np \(parse-noun-phrase\)\)\)) s
31.4 571 M
(    \(list 'prep-phrase preposition np\)\)\)) s
31.4 547 M
(\(define \(parse-word word-list\)) s
31.4 535 M
(  \(require \(not \(null? *unparsed*\)\)\)) s
31.4 523 M
(  \(require \(memq \(car *unparsed*\)) s
31.4 511 M
(                 \(cdr word-list\)\)\)) s
31.4 499 M
(  \(let \(\(found-word \(car *unparsed*\)\)\)) s
31.4 487 M
(    \(amb-set! *unparsed* \(cdr *unparsed*\)\)) s
31.4 475 M
(    \(list \(car word-list\) found-word\)\)\)) s
31.4 451 M
(\(define nouns) s
31.4 439 M
(  '\(noun student professor cat class\)\)) s
31.4 415 M
(\(define verbs) s
31.4 403 M
(  '\(verb studies lectures eats sleeps\)\)) s
31.4 379 M
(\(define articles) s
31.4 367 M
(  '\(article the a\)\)) s
31.4 343 M
(\(define prepositions) s
31.4 331 M
(  '\(prep for to in by with\)\)) s
_R
S
%%Page: (24) 24
%%BeginPageSetup
_S
18 36 translate
/pagenum 24 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (24) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(#|) s
31.4 667 M
(\(init-amb\)) s
31.4 655 M
(;Value: done) s
31.4 631 M
(\(pp) s
31.4 619 M
( \(parse) s
31.4 607 M
(  '\(the student with the cat sleeps in the class\)\)\)) s
31.4 583 M
(\(sentence) s
31.4 571 M
( \(noun-phrase) s
31.4 559 M
(  \(s-noun-phrase \(article the\) \(noun student\)\)) s
31.4 547 M
(  \(prep-phrase \(prep with\)) s
31.4 535 M
(               \(s-noun-phrase \(article the\)) s
31.4 523 M
(                              \(noun cat\)\)\)\)) s
31.4 511 M
( \(verb-phrase) s
31.4 499 M
(  \(verb sleeps\)) s
31.4 487 M
(  \(prep-phrase \(prep in\)) s
31.4 475 M
(               \(s-noun-phrase \(article the\)) s
31.4 463 M
(                              \(noun class\)\)\)\)\)) s
31.4 451 M
(;Unspecified return value) s
31.4 427 M
(\(amb\)) s
31.4 415 M
(;No more alternatives) s
31.4 403 M
(|#) s
_R
S
%%Page: (25) 25
%%BeginPageSetup
_S
18 36 translate
/pagenum 25 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Sun Mar 16 11:36:58 2014) def
/pagenumstr (25) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
31.4 679 M
(#|) s
31.4 667 M
(\(init-amb\)) s
31.4 655 M
(;Value: done) s
31.4 631 M
(\(pp) s
31.4 619 M
( \(parse) s
31.4 607 M
(  '\(the professor lectures) s
31.4 595 M
(        to the student with the cat\)\)\)) s
31.4 571 M
(\(sentence) s
31.4 559 M
( \(s-noun-phrase \(article the\) \(noun professor\)\)) s
31.4 547 M
( \(verb-phrase) s
31.4 535 M
(  \(verb-phrase) s
31.4 523 M
(   \(verb lectures\)) s
31.4 511 M
(   \(prep-phrase \(prep to\)) s
31.4 499 M
(                \(s-noun-phrase \(article the\)) s
31.4 487 M
(                               \(noun student\)\)\)\)) s
31.4 475 M
(  \(prep-phrase \(prep with\)) s
31.4 463 M
(               \(s-noun-phrase \(article the\)) s
31.4 451 M
(                              \(noun cat\)\)\)\)\)) s
31.4 439 M
(;Unspecified return value) s
31.4 415 M
(\(amb\)) s
31.4 391 M
(\(sentence) s
31.4 379 M
( \(s-noun-phrase \(article the\) \(noun professor\)\)) s
31.4 367 M
( \(verb-phrase) s
31.4 355 M
(  \(verb lectures\)) s
31.4 343 M
(  \(prep-phrase) s
31.4 331 M
(   \(prep to\)) s
31.4 319 M
(   \(noun-phrase) s
31.4 307 M
(    \(s-noun-phrase \(article the\)) s
31.4 295 M
(                   \(noun student\)\)) s
31.4 283 M
(    \(prep-phrase \(prep with\)) s
31.4 271 M
(                 \(s-noun-phrase \(article the\)) s
31.4 259 M
(                                \(noun cat\)\)\)\)\)\)\)) s
31.4 247 M
(;Unspecified return value) s
31.4 223 M
(\(amb\)) s
31.4 211 M
(;No more alternatives) s
31.4 199 M
(|#) s
_R
S
%%Trailer
%%Pages: 25
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
