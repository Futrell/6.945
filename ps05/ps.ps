%!PS-Adobe-3.0
%%BoundingBox: 18 36 594 756
%%Title: letter
%%Creator: GNU Enscript 1.6.5.2
%%CreationDate: Mon Mar 10 13:43:47 2014
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6.5 2
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6.5 2
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier-Bold /F-gs-font MF
/F-gs-font 12 12 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6.5 2

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 576 def
/d_page_h 720 def
/d_header_x 0 def
/d_header_y 705 def
/d_header_w 576 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 576 def
/d_footer_h 0 def
/d_output_w 576 def
/d_output_h 705 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Mon Mar 10 13:43:33 2014) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
19.4 677 M
(                MASSACHVSETTS INSTITVTE OF TECHNOLOGY) s
19.4 664 M
(      Department of Electrical Engineering and Computer Science) s
19.4 638 M
(                          6.945 Spring 2014) s
19.4 625 M
(                            Problem Set 5) s
19.4 599 M
(Issued: Wed. 12 March 2014                    Due: Wed. 19 March 2014) s
19.4 573 M
(Reading:) s
19.4 560 M
(    SICP, From Chapter 4: section 4.1.7--4.2 \(from PS04\)) s
19.4 547 M
(                          section 4.3; \(pp. 412--437\)) s
19.4 521 M
(Code: utils.scm, ghelper.scm, syntax.scm, rtdata.scm,) s
19.4 508 M
(      load-analyze.scm, analyze.scm, repl.scm) s
19.4 495 M
(      load-amb.scm, analyze-amb.scm repl-amb.scm) s
19.4 482 M
(      multiple-dwelling.scm) s
19.4 443 M
(                       Heavy Evaluator Hacking) s
19.4 417 M
(In this problem set we build interpreters in a different direction.) s
19.4 404 M
(We start with the essential EVAL/APPLY interpreter, written as an) s
19.4 391 M
(analyzer of the syntax into a compiler of compositions of execution) s
19.4 378 M
(procedures -- a small combinator language.  We will warm up by making) s
19.4 365 M
(modifications to this evaluator.) s
19.4 339 M
(Next, we will change the evaluator to include AMB expressions.  To add) s
19.4 326 M
(AMB, the execution procedures will all have a different shape: in) s
19.4 313 M
(addition to the environment, each will take two "continuation) s
19.4 300 M
(procedures" SUCCEED and FAIL.  In general, when a computation comes up) s
19.4 287 M
(with a value it will invoke SUCCEED with the proposed value and a) s
19.4 274 M
(complaint department which, if invoked, will try to produce an) s
19.4 261 M
(alternate value.  If a computation cannot come up with a value, it) s
19.4 248 M
(will invoke the complaint department passed to it in the FAIL) s
19.4 235 M
(continuation.) s
19.4 209 M
(An important lesson to be learned here is how to use continuation) s
19.4 196 M
(procedures to partially escape the expression structure of the) s
19.4 183 M
(language.  By construction, a functional expression has a unique) s
19.4 170 M
(value.  However, in the AMB system an expression may be ambiguous as) s
19.4 157 M
(to its value...  Think about how we arrange that to make sense!) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Mon Mar 10 13:43:33 2014) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
19.4 677 M
(             Separating Syntactic Analysis from Execution) s
19.4 664 M
(                      \(Compiling to Combinators\)) s
19.4 638 M
(It is important to read SICP section 4.1.7 carefully here.  When you) s
19.4 625 M
(load "load-analyze.scm" you will get an evaluator similar to the one) s
19.4 612 M
(described in this section.  ) s
19.4 586 M
(-------------) s
19.4 573 M
(Problem 5.1: Warmup) s
19.4 547 M
(It is often valuable to have procedures that can take an indefinite) s
19.4 534 M
(number of arguments.  The addition and multiplication procedures in) s
19.4 521 M
(Scheme are examples of such procedures.  Traditionally, a user may) s
19.4 508 M
(specify such a procedure in a definition by making the bound-variable) s
19.4 495 M
(specification of a lambda expression a symbol rather than a list of) s
19.4 482 M
(formal parameters.  That symbol is expected to be bound to the list of) s
19.4 469 M
(arguments supplied.  For example, to make a procedure that takes) s
19.4 456 M
(several arguments and returns a list of the squares of the arguments) s
19.4 443 M
(supplied, one may write:) s
19.4 417 M
(\(lambda x \(map square x\)\)) s
19.4 391 M
(or) s
19.4 365 M
(\(define \(ss . x\) \(map square x\)\)) s
19.4 339 M
(and then) s
19.4 313 M
(\(ss 1 2 3 4\) ==> \(1 4 9 16\)) s
19.4 287 M
(Modify the analyzing interpreter to allow this construction.  ) s
19.4 261 M
(Hint: you do not need to change the code involving DEFINE or LAMBDA) s
19.4 248 M
(in syntax.scm!  This is entirely a change in analyze.scm) s
19.4 222 M
(Demonstrate that your modification allows this kind of procedure, and) s
19.4 209 M
(that it does not cause other troubles.) s
19.4 196 M
(-------------) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Mon Mar 10 13:43:33 2014) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
19.4 677 M
(-------------) s
19.4 664 M
(Problem 5.2: Infix notation) s
19.4 638 M
(Many people like infix notation for small arithmetic expressions.  It) s
19.4 625 M
(is not hard to write a special form, \(INFIX <infix-string>\), that) s
19.4 612 M
(takes a character string, parses it as an infix expression with the) s
19.4 599 M
(usual precedence rules, and reduces it to Lisp.  Note that to do this) s
19.4 586 M
(you really don't have to delve into the combinator target mechanism of) s
19.4 573 M
(the evaluator, since this can be accomplished as a "macro" in the same) s
19.4 560 M
(way that COND and LET are implemented \(see syntax.scm\).) s
19.4 534 M
(So, for example, we should be able to write the program:) s
19.4 508 M
(\(define \(quadratic a b c\)) s
19.4 495 M
(  \(let \(\(discriminant \(infix "b^2-4*a*c"\)\)\)) s
19.4 482 M
(    \(infix "\(-b+sqrt\(discriminant\)\)/\(2*a\)"\)\)\)) s
19.4 443 M
(Hint: Do not try to parse numbers!  That is hard -- let Scheme do it) s
19.4 430 M
(for you: use string->number \(see MIT Scheme documentation\).  Just) s
19.4 417 M
(pass the substring that specifies the number to string->number to get) s
19.4 404 M
(the numerical value.) s
19.4 378 M
(Write the INFIX special form, install it in the evaluator, and) s
19.4 365 M
(demonstrate that it works.) s
19.4 339 M
(Please! Unless you have lots of time to burn, do not try to write a) s
19.4 326 M
(complete infix parser for some entire language, like Python \(easy\) or) s
19.4 313 M
(C++ \(hard\)!  We just want parsing of simple arithmetic expressions.) s
19.4 287 M
(Also, if you have written an infix parser before, and thus consider) s
19.4 274 M
(this a boring exercise, consider building it out of parser) s
19.4 261 M
(combinators.) s
19.4 248 M
(-------------) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Mon Mar 10 13:43:33 2014) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
19.4 677 M
(                 AMB and Nondeterministic Programming) s
19.4 651 M
(Now comes the real fun part of this problem set!  Please read section) s
19.4 638 M
(4.3 of SICP carefully before starting this part.  This interpreter) s
19.4 625 M
(requires a change in the interface structure of the combinators that) s
19.4 612 M
(code compiles into, so it is quite different.  Of course, our system) s
19.4 599 M
(differs from the one in SICP in that it is implemented with generic) s
19.4 586 M
(extension capability.  The loader for the interpreter extended for AMB) s
19.4 573 M
(is "load-amb.scm".) s
19.4 547 M
(                          Generate and Test) s
19.4 521 M
(We normally think of generate and test, and its extreme use in search,) s
19.4 508 M
(as an AI technique.  However, it can be viewed as a way of making) s
19.4 495 M
(systems that are modular and independently evolvable, as in the) s
19.4 482 M
(exploratory behavior of biological systems.  Consider a very simple) s
19.4 469 M
(example:  suppose we have to solve a quadratic equation.  There are two) s
19.4 456 M
(roots to a quadratic.  We could return both, and assume that the user) s
19.4 443 M
(of the solution knows how to deal with that, or we could return one) s
19.4 430 M
(and hope for the best.  \(The canonical sqrt routine returns the) s
19.4 417 M
(positive square root, even though there are two square roots!\)  The) s
19.4 404 M
(disadvantage of returning both solutions is that the receiver of that) s
19.4 391 M
(result must know to try the computation with both and either reject) s
19.4 378 M
(one, for good reason, or return both results of the computation, which) s
19.4 365 M
(may itself have made some choices.  The disadvantage of returning only) s
19.4 352 M
(one solution is that it may not be the right one for the receiver's) s
19.4 339 M
(purpose.) s
19.4 313 M
(Perhaps a better way to handle this is to build a backtracking) s
19.4 300 M
(mechanism into the infrastructure.  The square-root procedure should) s
19.4 287 M
(return one of the roots, with the option to change its mind and return) s
19.4 274 M
(the other one if the first choice is determined to be inappropriate by) s
19.4 261 M
(the receiver.  It is, and should be, the receiver's responsibility to) s
19.4 248 M
(determine if the ingredients to its computation are appropriate and) s
19.4 235 M
(acceptable.  This may itself require a complex computation, involving) s
19.4 222 M
(choices whose consequences may not be apparent without further) s
19.4 209 M
(computation, so the process is recursive.  Of course, this gets us) s
19.4 196 M
(into potentially deadly exponential searches through all possible) s
19.4 183 M
(assignments to all the choices that have been made in the program.  As) s
19.4 170 M
(usual, modular flexibility can be dangerous.) s
19.4 144 M
(                    Linguistically Implicit Search) s
19.4 118 M
(It is important to consider the extent to which a search strategy can) s
19.4 105 M
(be separated from the other parts of a program, so that one can) s
19.4 92 M
(interchange search strategies without greatly modifying the program.) s
19.4 79 M
(In this problem set we take the further step of pushing search and) s
19.4 66 M
(search control into the infrastructure that is supported by the) s
19.4 53 M
(language, without explicitly building search into our program at all.) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (ps.txt) def
/fdir (.) def
/ftail (ps.txt) def
% User defined strings:
/fmodstr (Mon Mar 10 13:43:33 2014) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
19.4 677 M
(This idea has considerable history.  In 1961 John McCarthy had the) s
19.4 664 M
(idea of a nondeterministic operator AMB, which could be useful for) s
19.4 651 M
(representing nondeterministic automata.  In 1967 Bob Floyd had the) s
19.4 638 M
(idea of building backtracking search into a computer language as part) s
19.4 625 M
(of the linguistic glue.  In 1969 Carl Hewitt proposed a language,) s
19.4 612 M
(PLANNER, that embodied these ideas.  In the early 1970s Colmerauer,) s
19.4 599 M
(Kowalski, Roussel, and Warren developed Prolog, a language based on a) s
19.4 586 M
(limited form of first-order predicate calculus, which made) s
19.4 573 M
(backtracking search implicit.) s
19.4 547 M
(-------------) s
19.4 534 M
(Problem 5.3: Warmup: Programming with AMB) s
19.4 508 M
(Run the multiple-dwelling program \(to get a feeling for how to use the) s
19.4 495 M
(system\).) s
19.4 469 M
(Do exercises 4.38, 4.39, and 4.40 \(p. 419\) from SICP.  ) s
19.4 443 M
(Note: we supply the multiple-dwelling.scm program so you need not type) s
19.4 430 M
(it in. ) s
19.4 417 M
(-------------) s
19.4 391 M
(-------------) s
19.4 378 M
(Problem 5.4: Your Puzzle \(From SICP Exercise 4.43, p.420\)) s
19.4 352 M
(Formalize and solve the following puzzle with AMB:) s
19.4 326 M
(     Mary Ann Moore's father has a yacht and so has each of his) s
19.4 313 M
(     four friends:  Colonel Downing, Mr. Hall, Sir Barnacle Hood,) s
19.4 300 M
(     and Dr. Parker.  Each of the five also has one daughter and) s
19.4 287 M
(     each has named his yacht after a daughter of one of the) s
19.4 274 M
(     others.  Sir Barnacle's yacht is the Gabrielle, Mr. Moore) s
19.4 261 M
(     owns the Lorna; Mr. Hall the Rosalind.  The Melissa, owned) s
19.4 248 M
(     by Colonel Downing, is named after Sir Barnacle's daughter.) s
19.4 235 M
(     Gabrielle's father owns the yacht that is named after Dr.) s
19.4 222 M
(     Parker's daughter.  Who is Lorna's father?) s
19.4 196 M
(You must use AMB to specify the alternatives that are possible for) s
19.4 183 M
(each choice.  Also determine how many solutions there are if we are) s
19.4 170 M
(not told that Mary Ann's last name is Moore.) s
19.4 157 M
(-------------) s
19.4 131 M
(-------------) s
19.4 118 M
(Problem 5.5: The AMB interpreter) s
19.4 92 M
(Do exercises 4.51, 4.52, and 4.53 \(pp. 436--437\) from SICP.) s
19.4 79 M
(-------------) s
_R
S
%%Trailer
%%Pages: 5
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
